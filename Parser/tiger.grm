%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj

%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%right ASSIGN
%left OR
%left AND
%left EQ NEQ
%left GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%%

program:	/* empty? */
|           exp program
|           dec program
;

decs:       /* empty */
|           dec decs
;

dec:        tydec
|           vardec
|           fundec
;

tydec:      TYPE ID EQ ty
;

ty:         ID
|           LBRACE tyfields RBRACE
|           ARRAY OF ID
;

tyfields:   /* empty */
|           ID COLON ID
|           ID COLON ID COMMA tyfields
;

vardec:     VAR ID ASSIGN exp
|           VAR ID COLON ID ASSIGN exp
;

fundec:     FUNCTION ID LPAREN tyfields RPAREN EQ exp
|           FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
;


letblock:   LET decs IN expseq END
;

whileblock: WHILE exp DO exp SEMICOLON

ifblock:    IF exp THEN exp
|           IF exp THEN exp ELSE exp
;   

forblock:   FOR ID ASSIGN exp TO exp DO exp SEMICOLON
;

expseq:     explist
|           LPAREN explist RPAREN           
;

explist:    exp
|           exp SEMICOLON explist
;

args:    
|           exp
|           exp COLON args
;

exp:        ID                     // TODO: better exp organization
|           ID LPAREN args RPAREN
|           LPAREN exp RPAREN
|           letblock
|           whileblock
|           ifblock
|           forblock
|           BREAK
|           dec
|           exp PLUS exp      		{$$ = $1 + $3;}     
|           exp MINUS exp		{$$ = $1 - $3;}
|           exp TIMES exp		{$$ = $1 * $3;}
|           exp DIVIDE exp		{$$ = $1 / $3;}
|           exp EQ exp			{$$ = $1 == $3;}
|           exp NEQ exp			{$$ = $1 != $3;}
|           exp LT exp			{$$ = $1 < $3;}
|           exp LE exp			{$$ = $1 <= $3;}
|           exp GT exp			{$$ = $1 > $3;}
|           exp GE exp			{$$ = $1 >= $3;}
|           exp AND exp			{$$ = $1 && $3;}
|           exp OR exp			{$$ = $1 || $3;}
|           ID ASSIGN exp
|           INT
|           STRING
;



	
